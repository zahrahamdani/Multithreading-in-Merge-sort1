# -*- coding: utf-8 -*-
"""4coresmergesort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y63oZWbaWCP-SWMkEe285edMTbTXDDoD
"""

import numpy as np
import threading

def merge_sort(array):
    # Base case: if the array has length 1, it is already sorted
    if len(array) == 1:
        return array
    
    # Split the array in half and sort the two halves recursively
    half = len(array) // 2
    left = merge_sort(array[:half])
    right = merge_sort(array[half:])
    
    # Merge the sorted halves and return the result
    return merge(left, right)

def merge(left, right):
    # Initialize the merged array and the indices for the left and right halves
    merged = []
    i, j = 0, 0
    
    # Iterate over the left and right halves, adding the smaller of the two elements
    # at each step to the merged array
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
    
    # Add the remaining elements (if any) to the merged array
    merged.extend(left[i:])
    merged.extend(right[j:])
    
    return merged

def parallel_merge_sort(array, num_threads):
    # Create a list of threads
    threads = []
    
    # Split the array into num_threads equally sized chunks
    chunk_size = len(array) // num_threads
    chunks = [array[i:i+chunk_size] for i in range(0, len(array), chunk_size)]
    
    # Create a thread for each chunk and start it
    for chunk in chunks:
        thread = threading.Thread(target=merge_sort, args=(chunk,))
        thread.start()
        threads.append(thread)
    
    # Wait for all threads to finish
    for thread in threads:
        thread.join()
    
    # Merge the sorted chunks and return the result
    while len(chunks) > 1:
        left = chunks.pop(0)
        right = chunks.pop(0)
        merged = merge(left, right)
        chunks.append(merged)
    
    return chunks[0]

# Generate a random array of integers to sort
array = np.random.randint(0, 50, size=100)

# Sort the array using 4 threads
sorted_array = parallel_merge_sort(array, 4)

# Print the sorted array
print(sorted_array)

